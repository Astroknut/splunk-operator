name: Integration Test on Azure WorkFlow
on:
  push:
    branches:
      - develop
      - master
jobs:
  build-operator-image:
    runs-on: ubuntu-latest
    env:
      SPLUNK_ENTERPRISE_IMAGE: ${{ secrets.SPLUNK_ENTERPRISE_IMAGE }}
      SPLUNK_OPERATOR_IMAGE_NAME: splunk/splunk-operator
      STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
      STORAGE_ACCOUNT_CONTAINER: ${{ secrets.AZURE_STORAGE_ACCOUNT_CONTAINER}}
    steps:
    - uses: actions/checkout@v2
    - name: Dotenv Action
      id: dotenv
      uses: falti/dotenv-action@d4d12eaa0e1dd06d5bdc3d7af3bf4c8c93cb5359
    - name: setup-docker
      uses: docker-practice/actions-setup-docker@v1
    - name: Install Operator SDK
      run: |
        sudo curl -L -o /usr/local/bin/operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/${{ steps.dotenv.outputs.OPERATOR_SDK_VERSION }}/operator-sdk-${{ steps.dotenv.outputs.OPERATOR_SDK_VERSION }}-x86_64-linux-gnu
        sudo chmod +x /usr/local/bin/operator-sdk
    - name: Connect to Azure Container Registry (ACR)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN}}
    - name: Pull Splunk Enterprise Image
      run: docker pull ${{ env.SPLUNK_ENTERPRISE_IMAGE }}
    - name: Make Splunk Operator Image
      run: |
        docker pull registry.access.redhat.com/ubi8/ubi-minimal:latest
        make docker-build IMG=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA
    - name: Push Splunk Operator Image to the Container Registry
      run: |
        echo "Uploading Image to the Container Registry :: ${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA"
        make docker-push  IMG=${{ env.REGISTRY_NAME }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA
  int-tests:
    strategy:
      fail-fast: false
      matrix:
        test:
          [
            appframeworks1,
            appframeworkc3,
            appframeworkm4,
            secret,
            smartstore,
            monitoringconsole,
            scaling,
            crcrud,
            licensemanager,
          ]
    runs-on: ubuntu-latest
    needs: build-operator-image
    env:
      CLUSTER_NODES: 1
      CLUSTER_WORKERS: 3
      SPLUNK_ENTERPRISE_IMAGE: splunk/splunk:edge
      SPLUNK_OPERATOR_IMAGE_NAME: splunk/splunk-operator
      SPLUNK_OPERATOR_IMAGE_FILENAME: splunk-operator
      TEST_FOCUS: "${{ matrix.test }}"
      # This regex matches any string not containing integration keyword
      TEST_TO_SKIP: "^(?:[^i]+|i(?:$|[^n]|n(?:$|[^t]|t(?:$|[^e]|e(?:$|[^g]|g(?:$|[^r]|r(?:$|[^a]|a(?:$|[^t]|t(?:$|[^i]|i(?:$|[^o]|o(?:$|[^n])))))))))))*$"
      TEST_CLUSTER_PLATFORM: azure
      REGISTRY_NAME: ${{secrets.AZURE_CONTAINER_REGISTRY}}
      CLUSTER_NAME: ${{secrets.CLUSTER_NAME}}
      RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
      STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
      STORAGE_ACCOUNT_CONTAINER: ${{ secrets.AZURE_STORAGE_ACCOUNT_CONTAINER}}
      ENTERPRISE_LICENSE_LOCATION: ${{ secrets.ENTERPRISE_LICENSE_LOCATION }}
      CLUSTER_WIDE: "true"
    steps:
      - name: Set Test Cluster Nodes and Parallel Runs
        run: >-
          if grep -q "appframework" <<< "${{ matrix.test }}"; then
            echo "CLUSTER_WORKERS=5" >> $GITHUB_ENV
            echo "CLUSTER_NODES=2" >> $GITHUB_ENV  
          fi
      - name: Change splunk enterprise to release on master branches
        if: github.ref == 'ref/head/master'
        run: |
          echo "SPLUNK_ENTERPRISE_IMAGE=${{ env.SPLUNK_ENTERPRISE_RELEASE_IMAGE }}" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Dotenv Action
        id: dotenv
        uses: falti/dotenv-action@d4d12eaa0e1dd06d5bdc3d7af3bf4c8c93cb5359
      - name: Install Kubectl
        uses: Azure/setup-kubectl@v1
        with:
          version: ${{ steps.dotenv.outputs.KUBECTL_VERSION }}
      - name: Install Python
        uses: actions/setup-python@v2
      - name: Install Azure CLI
        run:  curl -L https://aka.ms/InstallAzureCli | bash
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.dotenv.outputs.GO_VERSION }}
      - name: Install Go Lint
        run: |
          go version
          go get -u golang.org/x/lint/golint
      - name: Install Ginkgo 
        run: |
          go get github.com/onsi/ginkgo/ginkgo
          go get github.com/onsi/gomega/...
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@v1
      - name: Install Operator SDK
        run: |
          sudo curl -L -o /usr/local/bin/operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/${{ steps.dotenv.outputs.OPERATOR_SDK_VERSION }}/operator-sdk-${{ steps.dotenv.outputs.OPERATOR_SDK_VERSION }}-x86_64-linux-gnu
          sudo chmod +x /usr/local/bin/operator-sdk
      - name: Connect to Azure Container Registry (ACR)
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN}}
      - name: Pull Splunk Enterprise Image
        run: docker pull ${{ env.SPLUNK_ENTERPRISE_IMAGE }}
      - name: Make Splunk Operator Image
        run: |
          docker pull registry.access.redhat.com/ubi8/ubi-minimal:latest
          make docker-build IMG=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA
      - name: Push Splunk Operator Image to the Container Registry
        run: |
          echo "Uploading Image to the Container Registry :: ${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA"
          make docker-push  IMG=${{ env.REGISTRY_NAME }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA
      - name: Tag and Push Splunk Enterprise Image to the Container Registry
        run: |
          docker tag ${{ env.SPLUNK_ENTERPRISE_IMAGE }} ${{ secrets.AZURE_CONTAINER_REGISTRY }}/${{ env.SPLUNK_ENTERPRISE_IMAGE }}
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/${{ env.SPLUNK_ENTERPRISE_IMAGE }}
      - name: Create AKS cluster
        run: |
          make cluster-up
      - name: install metric server
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
      - name: install k8s dashboard
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.5/aio/deploy/recommended.yaml
      - name: Run Integration test
        run: |
          export SPLUNK_OPERATOR_IMAGE=${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA
          make int-test
      - name: Collect Test Logs
        if: ${{ always() }}
        run: |
          mkdir -p /tmp/pod_logs
          find ./test -name "*.log" -exec cp {} /tmp/pod_logs \;
      - name: Archive Pod Logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: "splunk-pods-logs--artifacts-${{ matrix.test }}"
          path: "/tmp/pod_logs/**"
      - name: Cleanup up AKS cluster
        if: ${{ always() }}
        run: |
          make cluster-down
  publish_operator_image:
    runs-on: ubuntu-latest
    needs: int-tests
    if: github.ref == 'refs/heads/develop'
    env:
      SPLUNK_OPERATOR_IMAGE_NAME: splunk/splunk-operator
      TAG: int
    steps:
    - uses: actions/checkout@v2
    - name: Dotenv Action
      id: dotenv
      uses: falti/dotenv-action@d4d12eaa0e1dd06d5bdc3d7af3bf4c8c93cb5359
    - name: setup-docker
      uses: docker-practice/actions-setup-docker@v1
    - name: Pull Splunk Operator Image Locally
      run: |
        docker pull ${{ secrets.STORAGE_ACCOUNT }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA
    - name: Change Operator Image Tag
      run: |
        docker tag ${{ secrets.STORAGE_ACCOUNT }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA ${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:${{ env.TAG }}
    - name: Connect to Azure Container Registry (ACR)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN}}
    